import keyboards as kb

import logging

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher, Bot, executor, types

from config import BOT_TOKEN, BOT_LINK

# import emoji

from fuzzywuzzy import fuzz

from Questions import *

from SQL import *

class StateGroup(StatesGroup):
    message_answer = State()
    bugs = State()
    notice = State()


bot = Bot(token = BOT_TOKEN, parse_mode=types.ParseMode.HTML)

dp = Dispatcher(bot, storage=MemoryStorage())

q = Questions()

sql = SQL()

logging.basicConfig(level=logging.ERROR)




sql.create_table()



@dp.message_handler(commands = "start")
async def registaration(message: types.Message):

    await bot.send_message(message.from_user.id, text = "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –±–æ—Ç–∞—Ç—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=kb.registration_inline_markup)


@dp.message_handler(commands = "send", commands_prefix = "!", commands_ignore_caption=False, content_types=["any"])
async def send_message(message: types.Message):
    a = message.text
    msg = a.split("!")
    await bot.send_message(chat_id=msg[2], text = "–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É: \n\n" + msg[3].strip().capitalize() + "\n\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–¥—ã —Ä–∞–±–æ—Ç–∞—Ç—å! üíñü§ñ")
    await bot.send_message(message.from_user.id, text = "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. üë®‚Äçüíªü§ñ")


@dp.message_handler(commands = "notice",  commands_prefix = "!")
async def notice(message: types.Message):
    await bot.send_message(message.from_user.id, text = "–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å <b>–í–°–ï–ú</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º? üë®‚Äçüíªü§ñ")
    await StateGroup.notice.set()

@dp.message_handler(content_types=["any"], state=StateGroup.notice)
async def check(message: types.Message, state: FSMContext):
    async with state.proxy() as result:
        result["notice"] = message.text
    await state.finish()
    data = sql.get_id()
    for i in range(0, len(data)):
        await bot.send_message(chat_id=data[i][0], text = str(result["notice"]).capitalize() + "\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è. üíñü§ñ")
    await bot.send_message(message.from_user.id, text = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <b>–í–°–ï–ú</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º üë®‚Äçüíªü§ñ")

# @dp.message_handler(commands = "bugs")
# async def registaration(message: types.Message):
#     # await message.forward(chat_id=1012078689)
#     await bot.send_message(message.from_user.id, text = "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –Ω–∏–∂–µ, –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ...üëá")
#     await StateGroup.bugs.set()

@dp.message_handler(commands = "–∫–∏–Ω—å–ë–¥–ü–ª–∏–∑")
async def bd(message: types.Message):
    f = open("users.db", "rb")
    await message.reply_document(f);


@dp.callback_query_handler(text="registration")
async def registration_handler(call: types.CallbackQuery):
    user_name = call.from_user.first_name
    user_id = call.from_user.id
    data = (str(user_name), int(user_id))
    print(data[1])
    if sql.add_in_table(con, data):
        await bot.send_message(call.from_user.id, text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!", reply_markup=kb.start_markup)
    else: 
        await bot.send_message(call.from_user.id, text = "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=kb.start_markup)


@dp.message_handler(lambda message: message.text == "–ù–∞—á–∞—Ç—å –±–æ—Ç–∞—Ç—å üìñ")
async def vie_main_menu(message: types.Message):
    user_id = message.from_user.id
    result = sql.search_in_table(str(user_id))
    await bot.send_message(message.from_user.id, text = "–ü—Ä–∏–≤–µ—Ç, <b>" + str(result[0][0]) + "</b>! \n\n–ï—Å–ª–∏ <b>–í–´</b> –æ–∫–∞–∑–∞–ª–∏—Å—å –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç <b>—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b> –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. \n–Ø –≤–∞–º–∏ –≥–æ—Ä–∂—É—Å—å!\n\n–í —Ü–µ–ª—è—Ö —É–ø—Ä–æ—â–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–ª–æ–∫–∞–º–∏. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ –¥—Ä—É–≥–∏–µ –±–ª–æ–∫–∏.\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫...</b>", reply_markup=kb.main_menu_markup)

@dp.message_handler(lambda message: message.text == "–ß–µ–ª–æ–≤–µ–∫ –∏ –æ–±—â–µ—Å—Ç–≤–æ üë•")
async def human_menu(message: types.Message):
    user_id = message.from_user.id
    q.set_mode(1)
    sql.set_mode(user_id, 1)
    await bot.send_message(message.from_user.id, text = "–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫: <b>–ß–µ–ª–æ–≤–µ–∫ –∏ –æ–±—â–µ—Å—Ç–≤–æ üë•</b>\n\n–ö–∞–∫–æ–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–æ–≤ –±—É–¥–µ–º –±–æ—Ç–∞—Ç—å?", reply_markup=kb.main_mode_markup)


@dp.message_handler(lambda message: message.text == "–≠–∫–æ–Ω–æ–º–∏–∫–∞ üë®‚Äçüíºüìà")
async def economy_menu(message: types.Message):
    user_id = message.from_user.id
    q.set_mode(2)
    sql.set_mode(user_id, 2)
    await bot.send_message(message.from_user.id, text = "–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫: <b>–≠–∫–æ–Ω–æ–º–∏–∫–∞ üë®‚Äçüíºüìà</b>\n\n–ö–∞–∫–æ–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–æ–≤ –±—É–¥–µ–º –±–æ—Ç–∞—Ç—å?", reply_markup=kb.main_mode_markup)


@dp.message_handler(lambda message: message.text == "–ü–æ–ª–∏—Ç–∏–∫–∞ üó£üì¢")
async def policy_menu(message: types.Message):
    user_id = message.from_user.id
    q.set_mode(3)
    sql.set_mode(user_id, 3)
    await bot.send_message(message.from_user.id, text = "–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫: <b>–ü–æ–ª–∏—Ç–∏–∫–∞ üó£üì¢</b>\n\n–ö–∞–∫–æ–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–æ–≤ –±—É–¥–µ–º –±–æ—Ç–∞—Ç—å?", reply_markup=kb.main_mode_markup)


@dp.message_handler(lambda message: message.text == "–ü—Ä–∞–≤–æ üßë‚Äç‚öñÔ∏è")
async def law_menu(message: types.Message):
    user_id = message.from_user.id    
    q.set_mode(4)
    sql.set_mode(user_id, 4)
    await bot.send_message(message.from_user.id, text = "–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫: <b>–ü—Ä–∞–≤–æ üßë‚Äç‚öñÔ∏è</b>\n\n–ö–∞–∫–æ–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–æ–≤ –±—É–¥–µ–º –±–æ—Ç–∞—Ç—å?", reply_markup=kb.main_mode_markup)

@dp.message_handler(lambda message: message.text == "–°–æ—Ü–∏–æ–ª–æ–≥–∏—è üë®‚Äçüè´")
async def sociology_menu(message: types.Message):
    user_id = message.from_user.id    
    q.set_mode(5)
    sql.set_mode(user_id, 5)
    await bot.send_message(message.from_user.id, text = "–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫: <b>–°–æ—Ü–∏–æ–ª–æ–≥–∏—è üë®‚Äçüè´</b>\n\n–ö–∞–∫–æ–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–æ–≤ –±—É–¥–µ–º –±–æ—Ç–∞—Ç—å?", reply_markup=kb.main_mode_markup)



@dp.message_handler(lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å üë§")
async def profile(message: types.Message):
    user_id = message.from_user.id
    data = sql.search_in_table(user_id)
    if data[0][4] != 0:
        human_correct = int((data[0][5] / data[0][4]) * 100)
    else:
        human_correct = 0
    if data[0][6] != 0:
        economy_correct = int((data[0][7] / data[0][6]) * 100)
    else:
        economy_correct = 0
    if data[0][8] != 0:
        policy_correct = int((data[0][9] / data[0][8]) * 100)
    else:
        policy_correct = 0
    if data[0][10] != 0:
        law_correct = int((data[0][11] / data[0][10]) * 100)
    else:
        law_correct = 0
    if data[0][12] != 0:
        sociology_correct = int((data[0][13] / data[0][12]) * 100)
    else:
        sociology_correct = 0
    if data[0][2] != 0:
        percent = int((data[0][3] / data[0][2]) * 100)
    else:
        percent = 0 
    await bot.send_message(message.from_user.id, text = "<i>–ò–º—è: </i><b>" + str(data[0][0]) + "</b>\n\n<i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –±–ª–æ–∫–∞–º:</i> \n\n<b>–ß–µ–ª–æ–≤–µ–∫ –∏ –æ–±—â–µ—Å—Ç–≤–æ:</b>\n\t<i>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: </i><b>" + str(data[0][4]) + "</b>\n\t<i>‚úÖ:</i><b> " + str(data[0][5]) + "</b>\n\t<i>–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö:</i> <b>" + str(human_correct) + "%</b>\n\n<b>–≠–∫–æ–Ω–æ–º–∏–∫–∞: </b>\n\t<i>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: </i><b>" + str(data[0][6]) + "</b>\n\t<i>‚úÖ:</i><b> " + str(data[0][7]) + "</b>\n\t<i>–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: </i><b>" + str(economy_correct) + "%</b>\n\n<b>–ü–æ–ª–∏—Ç–∏–∫–∞: </b>\n\t<i>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: </i><b>" + str(data[0][8]) + "</b>\n\t<i>‚úÖ:</i><b> " + str(data[0][9]) + "</b>\n\t<i>–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö:</i> <b>" + str(policy_correct) + "%</b>\n\n<b>–ü—Ä–∞–≤–æ: </b>\n\t<i>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: </i><b>" + str(data[0][10]) + "</b>\n\t<i>‚úÖ:</i><b> " + str(data[0][11]) + "</b>\n\t<i>–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö:</i> <b>" + str(law_correct) + "%</b>\n\n<b>–°–æ—Ü–∏–æ–ª–æ–≥–∏—è: </b>\n\t<i>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: </i><b>" + str(data[0][12]) + "</b>\n\t<i>‚úÖ:</i><b> " + str(data[0][13]) + "</b>\n\t<i>–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö:</i> <b>" + str(sociology_correct) + "%</b>\n\t\n\n<b>–û–±—â–∞—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –ø–æ –∫—É—Ä—Å—É: </b><b>" + str(percent) + "%</b>\n\n<i>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: </i><b>" + str(data[0][16]) +"</b>", reply_markup=kb.profile_menu_markup)

@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥ üîô")
async def back(message: types.Message):
    await bot.send_message(message.from_user.id, text = "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫...</b>", reply_markup=kb.main_menu_markup)


@dp.message_handler(lambda message: message.text == "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ üêû")
async def bugs(message: types.Message):
    await bot.send_message(message.from_user.id, text = "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –Ω–∏–∂–µ, –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ...üëá")
    await StateGroup.bugs.set()

@dp.message_handler(content_types=["any"], state=StateGroup.bugs)
async def check(message: types.Message, state: FSMContext):
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    await message.forward(chat_id=1012078689)
    await message.forward(chat_id=770629236)
    await bot.send_message(chat_id=1012078689, text = "–û—Ç: " + str(user_name) + ", <code>!send !" + str(user_id) + "!</code>")
    await bot.send_message(chat_id=770629236, text = "–û—Ç: " + str(user_name) + ", <code>!send !" + str(user_id) + "!</code>")
    await bot.send_message(message.from_user.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É! \n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üíñüíå", reply_markup=kb.profile_menu_markup)
    await state.finish()



@dp.message_handler(lambda message: message.text == "–°–º–µ–Ω–∏—Ç—å –±–ª–æ–∫ ‚ôªÔ∏è")
async def back_to_main_menu(message: types.Message):
    await bot.send_message(message.from_user.id, text = "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫...</b>", reply_markup=kb.main_menu_markup)



@dp.message_handler(lambda message: message.text == "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ üìù")
async def easy_question_human(message: types.Message):
    q.set_complexuty(1)
    await give_question(message =message)
    await StateGroup.message_answer.set()

@dp.message_handler(lambda message: message.text == "–°–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å ü§î")
async def hard_question_human(message: types.Message):
    q.set_complexuty(2)
    await give_question(message =message)
    await StateGroup.message_answer.set()

@dp.message_handler(lambda message: message.text.lower(), state=StateGroup.message_answer)
async def check(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    print(user_id)
    async with state.proxy() as result:
        result['message_answer'] = message.text
    await state.finish()
    print(result["message_answer"])
    data = sql.search_in_table(user_id)
    if data[0][15] == 1:
        percent = fuzz.token_sort_ratio(str(result["message_answer"]), q.get_answer(message.from_user.id))
        result = sql.search_in_table(user_id)
        await bot.send_message(message.from_user.id, text = "–í–∞—à–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–æ–∂–µ —Å –º–æ–∏–º –Ω–∞ <b>" +str(percent) + "%</b>", reply_markup=kb.check_true_answer_markup)
        if percent >= 60:
            sql.change_totals_correct(user_id, result[0][14])
            sql.update_true_data_in_table(user_id)
        sql.change_is_anwering(user_id, 0)
    else: 
        await bot.send_message(message.from_user.id, text = "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫...</b>", reply_markup=kb.main_menu_markup)
   
async def give_question(message: types.Message):
    user_id = message.from_user.id
    print(user_id)
    sql.update_all_total_in_table(user_id)
    q.set_question(user_id)
    sql.change_is_anwering(user_id, 1)
    await bot.send_message(message.from_user.id, text = "<b>" + str(q.get_question(message.from_user.id)).capitalize() + "- —ç—Ç–æ...</b>\n\n–û—Ç–≤–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç üëá")


@dp.message_handler(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚úÖ")
async def check_true_answer(message: types.Message):
    user_id = message.from_user.id
    result = sql.search_in_table(user_id)
    mode = ""
    if result[0][14] == 1:
        mode = "–ß–µ–ª–æ–≤–µ–∫ –∏ –æ–±—â–µ—Å—Ç–≤–æ üë•"
    elif result[0][14] == 2:
        mode = "–≠–∫–æ–Ω–æ–º–∏–∫–∞ üë®‚Äçüíºüìà"
    elif result[0][14] == 3:
        mode = "–ü–æ–ª–∏—Ç–∏–∫–∞ üó£üì¢"
    elif result[0][14] == 4:
        mode = "–ü—Ä–∞–≤–æ üßë‚Äç‚öñÔ∏è" 
    elif result[0][15] == 5:
        mode = "–°–æ—Ü–∏–æ–ª–æ–≥–∏—è üë®‚Äçüè´"
    await bot.send_message(message.from_user.id, text = "–¢–µ–∫—É—â–∏–π –±–ª–æ–∫: <b>" + str(mode) +"</b>\n\n<b>"+ str(q.get_question(message.from_user.id)) +"- —ç—Ç–æ</b><i>" + str(q.get_answer(message.from_user.id)) + "</i>", reply_markup=kb.main_mode_markup) 




# #–ü–ï–†–ï–î–ï–õ–ê–¢–¨ –ù–ê –ú–ê–®–ò–ù–£ –°–û–°–¢–û–Ø–ù–ò–ô 
# @dp.message_handler(lambda message: message.text.lower())
# async def check(message: types.Message):
#     user_id = message.from_user.id
#     data = sql.search_in_table(user_id)
#     print(data)
#     print(data[0][15])
#     if data[0][15] == 1:
#         user_answer = message.text

# #–ü–ï–†–ï–ü–ò–®–ò–¢–ï –≠–¢–£ –•–£–ô–ù–Æ –ü–û–ö–ê –í–°–ï –ù–ï –†–ê–ó–™–ï–ë–ê–õ–û–°–¨ –ù–ê–•–£–ô –ù–ò –í 
#         percent = fuzz.token_sort_ratio(user_answer, q.get_answer(message.from_user.id))
#         result = sql.search_in_table(user_id)
#         await bot.send_message(message.from_user.id, text = "–í–∞—à–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–æ–∂–µ —Å –º–æ–∏–º –Ω–∞ <b>" +str(percent) + "%</b>", reply_markup=kb.check_true_answer_markup)
#         if percent >= 60:
#             sql.change_totals_correct(user_id, result[0][14])
#             sql.update_true_data_in_table(user_id)
#         sql.change_is_anwering(user_id, 0)
#     else: 
#         await bot.send_message(message.from_user.id, text = "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫...</b>", reply_markup=kb.main_menu_markup)
# #–≠–¢–û –ù–ê–•–£–ô –û–ß–ï–ù–¨ –ü–õ–û–•–ê–Ø –ü–†–ê–ö–¢–ò–ö–ê ‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë


executor.start_polling(dp, skip_updates=True)


    




